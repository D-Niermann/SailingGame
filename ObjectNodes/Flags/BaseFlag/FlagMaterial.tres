[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

render_mode cull_disabled;
uniform sampler2D texture_albedo : hint_albedo;
uniform vec4 albedo : hint_color;
uniform float wave_size = 1.0;
uniform float wave_speed = 1.0;
uniform float noise_strength = 5.0;
uniform float gravity = 1.0;
uniform float time_offset = 0.0;


uniform sampler2D uv_offset_texture : hint_black;
uniform vec2 uv_offset_scale = vec2(-0.2,-0.1);
uniform vec2 time_scale = vec2(0.3, 0.0);
uniform float face_distortion = 0.5;

void vertex(){
	vec2 base_uv_offset = UV * uv_offset_scale;
	base_uv_offset += (TIME+time_offset) * time_scale;
	
	float noise = (0.5+UV.x)* texture(uv_offset_texture,base_uv_offset).r;
	float texture_based_offset = (noise - 0.5)* noise_strength;
	texture_based_offset *= UV.x;
	
	VERTEX.y += texture_based_offset + UV.x * sin(UV.x * 2.0 * 3.14 - (TIME+time_offset) * wave_speed) * wave_size;
	
	VERTEX.z += texture_based_offset * face_distortion + UV.x * UV.x*gravity+UV.x*sin((TIME+time_offset)*0.1);
	VERTEX.x += texture_based_offset * -face_distortion;
	
	
}


void fragment(){
	// Sample noise
	vec2 base_uv_offset = UV * uv_offset_scale;
	vec4 albedo_tex = texture(texture_albedo,UV);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	ALPHA = albedo.a * albedo_tex.a;
	// base_uv_offset += TIME * time_scale;
//	float noise = texture(uv_offset_texture, base_uv_offset).r;
//	float color = noise*2.0;
//	ALBEDO = vec3(color*0.5,color*0.4,color*0.4); //Display noise. Blue for valleys, green for peaks
//	if (UV.y>.3 && UV.y<.7){
//		ALBEDO.z = 1.;
//
//	}
//	else{
//		ALBEDO.x = 1.;
//		ALBEDO.y = 1.;
//	}
	//ALBEDO = vec3(1.0 - UV.x, 0.0, UV.x); //Display dampening. Red is full dampening, blue is none
}
"

[sub_resource type="StreamTexture" id=2]
flags = 23
load_path = "res://.import/ExampleflagTexture2.png-734a49ddf5b9124f5358bd43fb435c21.s3tc.stex"

[sub_resource type="OpenSimplexNoise" id=3]

[sub_resource type="NoiseTexture" id=4]
seamless = true
noise = SubResource( 3 )

[resource]
resource_local_to_scene = true
render_priority = 23
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/wave_size = 1.192
shader_param/wave_speed = 1.429
shader_param/noise_strength = 2.835
shader_param/gravity = 2.255
shader_param/time_offset = 0.0
shader_param/uv_offset_scale = Vector2( -0.2, -0.1 )
shader_param/time_scale = Vector2( 0.084, 0 )
shader_param/face_distortion = 0.5
shader_param/texture_albedo = SubResource( 2 )
shader_param/uv_offset_texture = SubResource( 4 )
